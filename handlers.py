# handlers.py

import config
import logging
import replicate

import time
import tempfile, requests, httpx, os 
import threading
from threading import Thread, Event
from telegram import (
    ChatAction, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    Update)
from telegram.ext import CallbackContext

from menu import render_menu, MENUS
from menu import CB_MAIN, CB_GENERATION, CB_PROFILE, CB_PARTNER 
from menu import CB_GEN_KLING_STD, CB_GEN_KLING_PRO, CB_GEN_KLING_MAST, CB_GEN_VEO  
from menu import MODEL_MAP, CB_SUB_PREMIUM
from config import (
    bot,                    # Telegram Bot
    executor,               # ThreadPoolExecutor
    generate_semaphore,     # Semaphore –¥–ª—è –æ—á–µ—Ä–µ–¥–∏
    MIN_INTERVAL,           # –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–Ω—Ç–∏-—Å–ø–∞–º–∞
    POSITIVE_PROMPT,        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è prompt-–∞
    NEGATIVE_PROMPT,        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è negative_prompt
    logger,                 # –õ–æ–≥–≥–µ—Ä (–∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π —á–µ—Ä–µ–∑ logging.getLogger)
    user_data,
    user_limits,
    CHANNEL_USERNAME,
    CHANNEL_LINK,
    replicate_client,
    ADMIN_IDS
)



def _keep_upload_action(bot, chat_id, stop_event):
    """
    –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ —à–ª—ë—Ç Telegram-—É —Å—Ç–∞—Ç—É—Å UPLOAD_VIDEO,
    –ø–æ–∫–∞ stop_event –Ω–µ —Å—Ç–∞–Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.
    """
    while not stop_event.is_set():
        bot.send_chat_action(chat_id=chat_id, action=ChatAction.UPLOAD_VIDEO)
        stop_event.wait(10)


def check_subscription(user_id: int) -> bool:
    try:
        status = config.bot.get_chat_member(
            chat_id=f"@{CHANNEL_USERNAME}", user_id=user_id
        ).status
        return status in ("member", "creator", "administrator")
    except:
        return False

def send_subscribe_prompt(chat_id: int):
    kb = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_LINK)],
        [InlineKeyboardButton("üîÑ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_sub")]
    ]
    config.bot.send_message(
        chat_id=chat_id,
        text = (
            "üëã –ü—Ä–∏–≤–µ—Ç!\n"
            "–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à Telegram‚Äë–∫–∞–Ω–∞–ª.\n\n"
            "–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ?\n"
            "üìå –¢–∞–º —è –¥–µ–ª—é—Å—å –≥–æ—Ç–æ–≤—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –∏ –∫—Ä–∞—Å–∏–≤—ã—Ö –≤–∏–¥–µ–æ.\n"
            "üìå –¢—ã —Å–º–æ–∂–µ—à—å –±—ã—Å—Ç—Ä–µ–µ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏–¥–µ–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.\n"
            "üìå –ö–∞–Ω–∞–ª ‚Äî —ç—Ç–æ –Ω–µ —Å–ø–∞–º, –∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞, –∫–æ—Ç–æ—Ä–∞—è —ç–∫–æ–Ω–æ–º–∏—Ç —Ç–≤–æ–µ –≤—Ä–µ–º—è.\n\n"
            "üëâ –ü–æ–¥–ø–∏—Å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞, –≤–µ–¥—å –∏–º–µ–Ω–Ω–æ —Ç–∞–º –±—É–¥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –±–æ—Ç–∞."
        ),
        reply_markup=InlineKeyboardMarkup(kb)
    )


# ‚Äî‚Äî‚Äî –§–æ–Ω–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ ‚Äî‚Äî‚Äî
def generate_and_send_video(user_id):
    logger.info(f"[{user_id}] ‚ñ∂Ô∏è –ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ")
    data = user_data.get(user_id, {})
    image_url = data.get("last_image")
    prompt    = data.get("prompt")
    model     = data.get("model", "kling-pro")
    
    # –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–π –ø–æ—Ç–æ–∫, –∫–æ—Ç–æ—Ä—ã–π —à–ª—ë—Ç ¬´upload_video¬ª —Ä–∞–∑ –≤ 10¬†—Å–µ–∫
    stop_event = threading.Event()
    threading.Thread(
        target=_keep_upload_action,
        args=(bot, user_id, stop_event),
    daemon=True
).start()

    try:
        logger.info(f"Start video generation: model={model}, prompt={prompt}")
        logger.info(f"[{user_id}] üåÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω–∞...")

        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Telegram, –µ—Å–ª–∏ –æ–Ω–æ –Ω—É–∂–Ω–æ
        tmp_file = None
        if model in ["kling-standard", "kling-pro", "kling-master"]:
            if not image_url:
                bot.send_message(chat_id=user_id, text="–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                return
            response = requests.get(image_url)
            response.raise_for_status()
            with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tmp_file:
                tmp_file.write(response.content)
                tmp_file.flush()
            image_input = open(tmp_file.name, "rb")

        # –í—ã–∑–æ–≤ –Ω—É–∂–Ω–æ–π –º–æ–¥–µ–ª–∏
        if model == "kling-standard":
            logger.info(f"[{user_id}] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: –º–æ–¥–µ–ª—å={model}, prompt={prompt}, —Ñ–∞–π–ª={image_url}")
            output = replicate.run(
                "kwaivgi/kling-v2.1",
                input={
                    "mode": "standard",
                    "prompt": f"{POSITIVE_PROMPT}, {prompt}",
                    "duration": 5,
                    "start_image": image_input,
                    "negative_prompt": NEGATIVE_PROMPT
                }
            )
        elif model == "kling-pro":
            logger.info(f"[{user_id}] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: –º–æ–¥–µ–ª—å={model}, prompt={prompt}, —Ñ–∞–π–ª={image_url}")
            output = replicate.run(
                "kwaivgi/kling-v2.1",
                input={
                    "mode": "pro",
                    "prompt": f"{POSITIVE_PROMPT}, {prompt}",
                    "duration": 5,
                    "start_image": image_input,
                    "negative_prompt": NEGATIVE_PROMPT
                }
            )
        elif model == "kling-master":
            logger.info(f"[{user_id}] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: –º–æ–¥–µ–ª—å={model}, prompt={prompt}, —Ñ–∞–π–ª={image_url}")
            output = replicate.run(
                "kwaivgi/kling-v2.1-master",
                input={
                    "prompt": f"{POSITIVE_PROMPT}, {prompt}",
                    "duration": 5,
                    "aspect_ratio": "9:16",
                    "start_image": image_input,
                    "negative_prompt": NEGATIVE_PROMPT
                }
            )
        elif model == "veo":
            logger.info(f"[{user_id}] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: –º–æ–¥–µ–ª—å={model}, prompt={prompt}, —Ñ–∞–π–ª={image_url}")
            output = replicate.run(
                "google/veo-3-fast",
                input={"prompt": prompt}
            )
        else:
            raise ValueError("Unknown model selected")

        video_url = output.url
        # 3) –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
        stop_event.set()
        logger.info(f"[{user_id}] ‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ: {video_url}")
        
        # üîç HEAD-–∑–∞–ø—Ä–æ—Å –∫ —Ñ–∞–π–ª—É (–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏)
        try:
            check = httpx.head(video_url, timeout=10)
            logger.info(f"[{user_id}] HEAD status: {check.status_code}")
            if check.status_code != 200:
                bot.send_message(chat_id=user_id, text="‚ö†Ô∏è –í–∏–¥–µ–æ –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n" + video_url)
                return
        except Exception as e:
            logger.warning(f"[{user_id}] HEAD-–∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è: {e}")
            bot.send_message(chat_id=user_id, text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∏–¥–µ–æ. –í–æ—Ç —Å—Å—ã–ª–∫–∞:\n" + video_url)
            return
        
        # ‚úÖ –¢–≤–æ–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!
        bot.send_message(
            chat_id=user_id,
            text="‚úÖ –¢–≤–æ–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!"
        )

        # ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–æ–ª–∏–∫–∞ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç (—Å–∫–∞—á–∞–µ–º –∏ –ø–µ—Ä–µ—à–ª—ë–º —Å–∞–º–∏)
        try:
            # 1) —Å–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –∏–∑ replicate –≤ tmp‚Äë—Ñ–∞–π–ª
            resp = requests.get(video_url, stream=True)
            resp.raise_for_status()
            with tempfile.NamedTemporaryFile(delete=False, suffix=".mp4") as tmp_vid:
                for chunk in resp.iter_content(chunk_size=8192):
                    tmp_vid.write(chunk)
                tmp_path = tmp_vid.name

            # 2) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
            with open(tmp_path, "rb") as f:
                bot.send_document(
                    chat_id=user_id,
                    document=f,
                    filename="video.mp4"
                )

            # 3) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º inline-–º–µ–Ω—é ¬´–°–¥–µ–ª–∞—Ç—å –µ—â—ë –≤–∏–¥–µ–æ¬ª
            text, markup = render_menu(CB_GENERATION, user_id)
            bot.send_message(
                chat_id=user_id,
                text="–°–¥–µ–ª–∞–µ–º –µ—â—ë –≤–∏–¥–µ–æ? ü•π",
                reply_markup=markup,
                parse_mode="HTML"
            )

        except Exception as e:
            logger.error(f"[{user_id}] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            bot.send_message(
                chat_id=user_id,
                text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ. –í–æ—Ç —Å—Å—ã–ª–∫–∞:\n" + video_url
            )
        finally:
            if 'tmp_path' in locals() and os.path.exists(tmp_path):
                os.remove(tmp_path)

        # ‚è± –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã
        user_limits[user_id] += 1

    except Exception:
        logger.exception("Video generation error")
        bot.send_message(chat_id=user_id, text="‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    finally:
        if tmp_file:
            try:
                os.remove(tmp_file.name)
            except OSError:
                pass                


def queued_generate_and_send_video(user_id):
    # –¥–æ–∂–¥–∞—Ç—å—Å—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
    generate_semaphore.acquire()
    try:
        generate_and_send_video(user_id)
    finally:
        # –æ—Ç–ø—É—Å—Ç–∏—Ç—å —Å–ª–æ—Ç
        generate_semaphore.release()


# ‚Äî‚Äî‚Äî –•–µ–Ω–¥–ª–µ—Ä—ã ‚Äî‚Äî‚Äî
def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    # 1) –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É ‚Äî –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –≤—ã—Ö–æ–¥–∏–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç
    if not check_subscription(user_id):
        return send_subscribe_prompt(chat_id)

    # 2) –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî —Ä–µ–Ω–¥–µ—Ä–∏–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ menu.render_menu
    text, markup = render_menu(CB_MAIN, user_id)

    # 3) —à–ª—ë–º –µ–≥–æ –∫–∞–∫ HTML (—á—Ç–æ–±—ã —Ç–µ–≥–∏ <b> —Ä–∞–±–æ—Ç–∞–ª–∏)
    update.message.reply_text(
        text,
        reply_markup=markup,
        parse_mode="HTML"
    )

# 2) –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π ¬´–≥–ª. –ø—É–Ω–∫—Ç¬ª –∫ –∫–æ–º–∞–Ω–¥–∞–º:
# /choose_model ‚Üí –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
def choose_model(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    if not check_subscription(user_id):
        return send_subscribe_prompt(chat_id)
    text, markup = render_menu(CB_GENERATION, user_id)
    update.message.reply_text(text, reply_markup=markup, parse_mode="HTML")

# /profile ‚Üí –ü—Ä–æ—Ñ–∏–ª—å
def profile(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    if not check_subscription(user_id):
        return send_subscribe_prompt(chat_id)
    text, markup = render_menu(CB_PROFILE, user_id)
    update.message.reply_text(text, reply_markup=markup, parse_mode="HTML")

# # /info ‚Üí –û –º–æ–¥–µ–ª—è—Ö
# def info(update: Update, context: CallbackContext):
#     user_id = update.effective_user.id
#     chat_id = update.effective_chat.id
#     if not check_subscription(user_id):
#         return send_subscribe_prompt(chat_id)
#     text, markup = render_menu(CB_INFO, user_id)
#     update.message.reply_text(text, reply_markup=markup, parse_mode="HTML")

# /partner ‚Üí –ü–∞—Ä—Ç–Ω—ë—Ä–∫–∞
def partner(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    if not check_subscription(user_id):
        return send_subscribe_prompt(chat_id)
    text, markup = render_menu(CB_PARTNER, user_id)
    update.message.reply_text(text, reply_markup=markup, parse_mode="HTML")


def menu_callback(update: Update, context: CallbackContext):
    q = update.callback_query
    q.answer()
    uid = q.from_user.id
    chat_id = q.message.chat.id
    data = q.data
    
    has_premium = (uid in ADMIN_IDS) or (config.user_limits.get(uid, 0) > 0)
    
    # 1) –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏ –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–µ–π
    if data in MODEL_MAP:
        if not has_premium:
            text, markup = render_menu(CB_SUB_PREMIUM, uid)
            return context.bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=markup,
                parse_mode="HTML"
            )

        # —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø—Ä–µ–º–∏—É–º ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
        model = MODEL_MAP[data]
        user_data.setdefault(uid, {})["model"] = model

        if data == CB_GEN_VEO:
            return context.bot.send_message(
                chat_id=chat_id,
                text=(
                    f"‚úÖ –†–µ–∂–∏–º ¬´{model}¬ª –≤—ã–±—Ä–∞–Ω.\n"
                    "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ (–±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)."
                )
            )
        else:
            return context.bot.send_message(
                chat_id=chat_id,
                text=(
                    f"‚úÖ –†–µ–∂–∏–º ¬´{model}¬ª –≤—ã–±—Ä–∞–Ω.\n"
                    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∑–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–∏–¥–µ–æ."
                )
            )

    # 2) –±–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é, –µ—Å–ª–∏ –æ—Ç–ø–∏—Å–∞–ª—Å—è
    if not check_subscription(uid):
        return send_subscribe_prompt(chat_id)
        
    try:
        q.message.delete()
    except:
        pass

    # –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ
    text, markup = render_menu(q.data, uid)
    context.bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=markup,
        parse_mode="HTML"
    )


def on_check_sub(update: Update, context: CallbackContext):
    q = update.callback_query
    # —Å—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä
    q.answer()

    user_id = q.from_user.id
    chat_id = q.message.chat.id

    if check_subscription(user_id):
        # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–º–æ–ª—á–∞, –±–µ–∑ –ø–∞–¥–µ–Ω–∏–π)
        try:
            q.message.delete()
        except:
            pass

        # 3) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é inline-–∫–Ω–æ–ø–∫–∞–º–∏
        text, markup = render_menu(CB_MAIN, uid)
        context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=markup,
            parse_mode="HTML"
        )
    else:
        # –µ—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert
        q.answer("–Ø –≤—Å—ë –µ—â—ë –Ω–µ –≤–∏–∂—É –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É.", show_alert=True)


def image_upload_handler(update: Update, context: CallbackContext):
    uid = update.effective_user.id
    if not check_subscription(uid):
        return send_subscribe_prompt(uid)

    user_id = update.effective_user.id

    if update.message.photo:
        file_id = update.message.photo[-1].file_id
    elif update.message.document and update.message.document.mime_type.startswith("image/"):
        file_id = update.message.document.file_id
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    try:
        file = context.bot.get_file(file_id)
        file_url = file.file_path

        data = user_data.setdefault(user_id, {})
        data["last_image"] = file_url
        data["last_image_id"] = file_id

        # üìå –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ä–∞–∑—É —É–∫–∞–∑–∞–ª –ø–æ–¥–ø–∏—Å—å
        if update.message.caption:
            prompt = update.message.caption.strip()
            data["prompt"] = prompt
            update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏ –ø—Ä–æ–º–ø—Ç—É‚Ä¶ –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 3-5 –º–∏–Ω—É—Ç, –Ω–æ –∏–Ω–æ–≥–¥–∞ –¥–æ 20 –º–∏–Ω—É—Ç –ø—Ä–∏ –±–æ–ª—å—à–æ–π –æ—á–µ—Ä–µ–¥–∏")
            executor.submit(queued_generate_and_send_video, user_id)
        else:
            update.message.reply_text("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.")
    except Exception as e:
        logger.error(f"Error saving uploaded image: {e}")
        update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        

def text_handler(update: Update, context: CallbackContext):
    uid = update.effective_user.id
    if not check_subscription(uid):
        return send_subscribe_prompt(uid)

    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    if text == "üîÑ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å":
        return start(update, context)
        
    now = time.time()
    data = user_data.setdefault(user_id, {})
    limits = user_limits[user_id]

    # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
    last = data.get("last_action", 0)
    if now - last < MIN_INTERVAL:
        wait = int(MIN_INTERVAL - (now - last))
        update.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {wait} —Å–µ–∫.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞
    if data.get("last_image"):
        data["model"] = data.get("model", "kling-pro")
        data["prompt"] = text
        data["last_action"] = now
        update.message.reply_text("‚è≥ –í–∏–¥–µ–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è‚Ä¶ –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 3-5 –º–∏–Ω—É—Ç, –Ω–æ –∏–Ω–æ–≥–¥–∞ –¥–æ 20 –º–∏–Ω—É—Ç –ø—Ä–∏ –±–æ–ª—å—à–æ–π –æ—á–µ—Ä–µ–¥–∏")
        executor.submit(queued_generate_and_send_video, user_id)
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
