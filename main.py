# main.py

import os
import logging
import time
from concurrent.futures import ThreadPoolExecutor

from fastapi import FastAPI, Request, HTTPException
from telegram import Bot, Update, ReplyKeyboardMarkup
from telegram.ext import (
    Dispatcher,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackContext,
)
import replicate
import tempfile
import requests
import httpx
import threading
from telegram import ChatAction
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler



# ‚Äî‚Äî‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî‚Äî‚Äî
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ‚Äî‚Äî‚Äî –ö–æ–Ω—Ñ–∏–≥ ‚Äî‚Äî‚Äî
BOT_TOKEN           = os.getenv("BOT_TOKEN")
WEBHOOK_SECRET      = os.getenv("WEBHOOK_SECRET")
WEBHOOK_PATH        = f"/webhook/{WEBHOOK_SECRET}"
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")

# ‚Äî‚Äî‚Äî Negative Prompt ‚Äî‚Äî‚Äî
NEGATIVE_PROMPT = (
    "bad eyes, bad hands, missing fingers, extra fingers, ugly, bad anatomy, blurry, "
    "bad quality, worst quality, worst detail, sketch, watermark, signature, artist name, "
    "extra limbs, lowres, disfigured face, malformed, deformities, fused limbs, disconnected limbs, "
    "duplicate limbs, mutated hands, mutated limbs, unnatural pose, asymmetrical eyes, asymmetry, "
    "physical-defects, unhealthy-deformed-joints, unhealthy-hands, unhealthy-feet, "
    "jpeg artifacts, cropped, duplicate"
)

# ‚Äî‚Äî‚Äî Positive Prompt ‚Äî‚Äî‚Äî
POSITIVE_PROMPT = (
    "masterpiece, best quality, high resolution, cinematic lighting, detailed, "
    "perfect composition, ultra realistic, 4k, colorful, sharp focus, "
    "depth of field, detailed eyes, perfect eyes, realistic eyes"
)


# ‚Äî‚Äî‚Äî –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ ‚Äî‚Äî‚Äî
CHANNEL_LINK     = "https://t.me/metaswarm_01"  # —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª
CHANNEL_USERNAME = "metaswarm_01"               # username –∫–∞–Ω–∞–ª–∞ –±–µ–∑ @


def _keep_upload_action(bot, chat_id, stop_event):
    """
    –ö–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥ —à–ª—ë—Ç Telegram-—É —Å—Ç–∞—Ç—É—Å UPLOAD_VIDEO,
    –ø–æ–∫–∞ stop_event –Ω–µ —Å—Ç–∞–Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.
    """
    while not stop_event.is_set():
        bot.send_chat_action(chat_id=chat_id, action=ChatAction.UPLOAD_VIDEO)
        stop_event.wait(15)


def check_subscription(user_id: int) -> bool:
    try:
        status = bot.get_chat_member(
            chat_id=f"@{CHANNEL_USERNAME}", user_id=user_id
        ).status
        return status in ("member", "creator", "administrator")
    except:
        return False

def send_subscribe_prompt(chat_id: int):
    kb = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_LINK)],
        [InlineKeyboardButton("üîÑ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_sub")]
    ]
    bot.send_message(
        chat_id=chat_id,
        text="üîí –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:",
        reply_markup=InlineKeyboardMarkup(kb)
    )



if not all([BOT_TOKEN, WEBHOOK_SECRET, REPLICATE_API_TOKEN]):
    logger.error("Missing required environment variables")
    raise RuntimeError("Missing API keys or webhook secret")

bot = Bot(token=BOT_TOKEN)
app = FastAPI()
dp = Dispatcher(bot=bot, update_queue=None, use_context=True)
replicate_client = replicate.Client(token=REPLICATE_API_TOKEN)
executor = ThreadPoolExecutor(max_workers=2)

# ‚Äî‚Äî‚Äî In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ ‚Äî‚Äî‚Äî
user_data = {}  # user_id ‚Üí {"last_image": ..., "last_action": ..., "prompt": ..., "model": ...}
user_limits = {}  # user_id ‚Üí {"videos": int}

MIN_INTERVAL = 5  # —Å–µ–∫ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

# ‚Äî‚Äî‚Äî –§–æ–Ω–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ ‚Äî‚Äî‚Äî
def generate_and_send_video(user_id):
    data = user_data.get(user_id, {})
    image_url = data.get("last_image")
    prompt    = data.get("prompt")
    model     = data.get("model", "kling-pro")

    # –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–π –ø–æ—Ç–æ–∫, –∫–æ—Ç–æ—Ä—ã–π —à–ª—ë—Ç ¬´upload_video¬ª —Ä–∞–∑ –≤ 15¬†—Å–µ–∫
    stop_event = threading.Event()
    threading.Thread(
        target=_keep_upload_action,
        args=(bot, user_id, stop_event),
        daemon=True
    ).start()

    try:
        logger.info(f"Start video generation: model={model}, prompt={prompt}")
        logger.info(f"[{user_id}] üåÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω–∞...")

        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Telegram, –µ—Å–ª–∏ –æ–Ω–æ –Ω—É–∂–Ω–æ
        tmp_file = None
        if model in ["kling-standard", "kling-pro", "kling-master"]:
            if not image_url:
                bot.send_message(chat_id=user_id, text="–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                return
            response = requests.get(image_url)
            response.raise_for_status()
            with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tmp_file:
                tmp_file.write(response.content)
                tmp_file.flush()
            image_input = open(tmp_file.name, "rb")

        # –í—ã–∑–æ–≤ –Ω—É–∂–Ω–æ–π –º–æ–¥–µ–ª–∏
        if model == "kling-standard":
            logger.info(f"[{user_id}] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: –º–æ–¥–µ–ª—å={model}, prompt={prompt}, —Ñ–∞–π–ª={image_url}")
            output = replicate.run(
                "kwaivgi/kling-v2.1",
                input={
                    "mode": "standard",
                    "prompt": f"{POSITIVE_PROMPT}, {prompt}",
                    "duration": 5,
                    "start_image": image_input,
                    "negative_prompt": NEGATIVE_PROMPT
                }
            )
        elif model == "kling-pro":
            logger.info(f"[{user_id}] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: –º–æ–¥–µ–ª—å={model}, prompt={prompt}, —Ñ–∞–π–ª={image_url}")
            output = replicate.run(
                "kwaivgi/kling-v2.1",
                input={
                    "mode": "pro",
                    "prompt": f"{POSITIVE_PROMPT}, {prompt}",
                    "duration": 5,
                    "start_image": image_input,
                    "negative_prompt": NEGATIVE_PROMPT
                }
            )
        elif model == "kling-master":
            logger.info(f"[{user_id}] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: –º–æ–¥–µ–ª—å={model}, prompt={prompt}, —Ñ–∞–π–ª={image_url}")
            output = replicate.run(
                "kwaivgi/kling-v2.1-master",
                input={
                    "prompt": f"{POSITIVE_PROMPT}, {prompt}",
                    "duration": 5,
                    "aspect_ratio": "9:16",
                    "start_image": image_input,
                    "negative_prompt": NEGATIVE_PROMPT
                }
            )
        elif model == "veo":
            logger.info(f"[{user_id}] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: –º–æ–¥–µ–ª—å={model}, prompt={prompt}, —Ñ–∞–π–ª={image_url}")
            output = replicate.run(
                "google/veo-3-fast",
                input={"prompt": prompt}
            )
        else:
            raise ValueError("Unknown model selected")

        video_url = output.url
        # 3) –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
        stop_event.set()
        logger.info(f"[{user_id}] ‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ: {video_url}")
        
        # üîç HEAD-–∑–∞–ø—Ä–æ—Å –∫ —Ñ–∞–π–ª—É (–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏)
        try:
            check = httpx.head(video_url, timeout=10)
            logger.info(f"[{user_id}] HEAD status: {check.status_code}")
            if check.status_code != 200:
                bot.send_message(chat_id=user_id, text="‚ö†Ô∏è –í–∏–¥–µ–æ –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n" + video_url)
                return
        except Exception as e:
            logger.warning(f"[{user_id}] HEAD-–∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è: {e}")
            bot.send_message(chat_id=user_id, text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∏–¥–µ–æ. –í–æ—Ç —Å—Å—ã–ª–∫–∞:\n" + video_url)
            return
        
        # ‚úÖ –¢–≤–æ–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!
        bot.send_message(
            chat_id=user_id,
            text="‚úÖ –¢–≤–æ–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!"
        )

        # ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–æ–ª–∏–∫–∞ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç (—Å–∫–∞—á–∞–µ–º –∏ –ø–µ—Ä–µ—à–ª—ë–º —Å–∞–º–∏)
        try:
            # 1) —Å–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –∏–∑ replicate –≤ tmp‚Äë—Ñ–∞–π–ª
            resp = requests.get(video_url, stream=True)
            resp.raise_for_status()
            with tempfile.NamedTemporaryFile(delete=False, suffix=".mp4") as tmp_vid:
                for chunk in resp.iter_content(chunk_size=8192):
                    tmp_vid.write(chunk)
                tmp_path = tmp_vid.name

            # 2) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
            with open(tmp_path, "rb") as f:
                bot.send_document(
                    chat_id=user_id,
                    document=f,
                    filename="video.mp4"
                )

            # 3) —Å–ø—Ä–∞—à–∏–≤–∞–µ–º, –¥–µ–ª–∞—Ç—å –ª–∏ –µ—â—ë –æ–¥–Ω–æ, –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                ["üéû –í–∏–¥–µ–æ (Kling Standard)", "üéû –í–∏–¥–µ–æ (Kling Pro)"],
                ["üéû –í–∏–¥–µ–æ (Kling Master)",  "üéû –í–∏–¥–µ–æ (Veo)"]
            ]
            markup = ReplyKeyboardMarkup(
                keyboard,
                one_time_keyboard=True,
                resize_keyboard=True
            )
            bot.send_message(
                chat_id=user_id,
                text="–°–¥–µ–ª–∞–µ–º –µ—â—ë –≤–∏–¥–µ–æ? ü•π",
                reply_markup=markup
            )

        except Exception as e:
            logger.error(f"[{user_id}] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            bot.send_message(
                chat_id=user_id,
                text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ. –í–æ—Ç —Å—Å—ã–ª–∫–∞:\n" + video_url
            )
        finally:
            if 'tmp_path' in locals() and os.path.exists(tmp_path):
                os.remove(tmp_path)



        # ‚è± –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã
        user_limits.setdefault(user_id, {})["videos"] = user_limits[user_id].get("videos", 0) + 1

    except Exception as e:
        logger.error(f"Video generation error: {e}")
        bot.send_message(chat_id=user_id, text="‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        if tmp_file:
            try:
                os.remove(tmp_file.name)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
        if tmp_file:
            os.remove(tmp_file.name)


# ‚Äî‚Äî‚Äî –•–µ–Ω–¥–ª–µ—Ä—ã ‚Äî‚Äî‚Äî
def start(update: Update, context: CallbackContext):
    uid = update.effective_user.id
    if not check_subscription(uid):
        return send_subscribe_prompt(uid)

    keyboard = [
       ["üéû –í–∏–¥–µ–æ (Kling Standard)", "üéû –í–∏–¥–µ–æ (Kling Pro)"],
       ["üéû –í–∏–¥–µ–æ (Kling Master)",  "üéû –í–∏–¥–µ–æ (Veo)"],
       ["üîÑ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å"]  # –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    ]
    markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False, resize_keyboard=True)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:", reply_markup=markup)


def on_check_sub(update: Update, context: CallbackContext):
    q = update.callback_query
    # —Å—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä
    q.answer()

    user_id = q.from_user.id
    chat_id = q.message.chat.id

    if check_subscription(user_id):
        # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–º–æ–ª—á–∞, –±–µ–∑ –ø–∞–¥–µ–Ω–∏–π)
        try:
            q.message.delete()
        except:
            pass

        # —à–ª—ë–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        keyboard = [
            ["üéû –í–∏–¥–µ–æ (Kling Standard)", "üéû –í–∏–¥–µ–æ (Kling Pro)"],
            ["üéû –í–∏–¥–µ–æ (Kling Master)",  "üéû –í–∏–¥–µ–æ (Veo)"],
            ["üîÑ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å"]
        ]
        markup = ReplyKeyboardMarkup(
            keyboard,
            one_time_keyboard=True,
            resize_keyboard=True
        )
        context.bot.send_message(
            chat_id=chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:",
            reply_markup=markup
        )
    else:
        # –µ—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert
        q.answer("–Ø –≤—Å—ë –µ—â—ë –Ω–µ –≤–∏–∂—É –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É.", show_alert=True)


def image_upload_handler(update: Update, context: CallbackContext):
    uid = update.effective_user.id
    if not check_subscription(uid):
        return send_subscribe_prompt(uid)

    user_id = update.effective_user.id

    if update.message.photo:
        file_id = update.message.photo[-1].file_id
    elif update.message.document and update.message.document.mime_type.startswith("image/"):
        file_id = update.message.document.file_id
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    try:
        file = context.bot.get_file(file_id)
        file_url = file.file_path

        data = user_data.setdefault(user_id, {})
        data["last_image"] = file_url
        data["last_image_id"] = file_id
        data["mode"] = "video"  # –ø–æ—Å–∫–æ–ª—å–∫—É –≤ –Ω–æ–≤–æ–º —Ñ–ª–æ—É —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ

        # üìå –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ä–∞–∑—É —É–∫–∞–∑–∞–ª –ø–æ–¥–ø–∏—Å—å
        if update.message.caption:
            prompt = update.message.caption.strip()
            data["prompt"] = prompt
            update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏ –ø—Ä–æ–º–ø—Ç—É‚Ä¶ –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 3-5 –º–∏–Ω—É—Ç, –Ω–æ –∏–Ω–æ–≥–¥–∞ –¥–æ 20 –º–∏–Ω—É—Ç –ø—Ä–∏ –±–æ–ª—å—à–æ–π –æ—á–µ—Ä–µ–¥–∏")
            executor.submit(generate_and_send_video, user_id)
        else:
            update.message.reply_text("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.")
    except Exception as e:
        logger.error(f"Error saving uploaded image: {e}")
        update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        

def text_handler(update: Update, context: CallbackContext):
    uid = update.effective_user.id
    if not check_subscription(uid):
        return send_subscribe_prompt(uid)

    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    if text == "üîÑ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å":
        return start(update, context)
        
    now = time.time()
    data = user_data.setdefault(user_id, {})
    limits = user_limits.setdefault(user_id, {"videos": 0})

    # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
    last = data.get("last_action", 0)
    if now - last < MIN_INTERVAL:
        wait = int(MIN_INTERVAL - (now - last))
        update.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {wait} —Å–µ–∫.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    model_map = {
        "üéû –í–∏–¥–µ–æ (Kling Standard)": "kling-standard",
        "üéû –í–∏–¥–µ–æ (Kling Pro)": "kling-pro",
        "üéû –í–∏–¥–µ–æ (Kling Master)": "kling-master",
        "üéû –í–∏–¥–µ–æ (Veo)": "veo",
    }
    if text in model_map:
        data["model"] = model_map[text]
        update.message.reply_text(
        "–†–µ–∂–∏–º –≤—ã–±—Ä–∞–Ω. –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç. \n\n"
        "‚ö†Ô∏è–í–∞–∂–Ω–æ!\n\n"
        "–ß–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ç–æ—á–Ω–µ–µ –ø—Ä–æ–º–ø—Ç(–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –≤–∏–¥–µ–æ), —Ç–µ–º –ª—É—á—à–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è!"
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞
    if data.get("last_image") and data.get("model"):
        data["prompt"] = text
        data["last_action"] = now
        update.message.reply_text("‚è≥ –í–∏–¥–µ–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è‚Ä¶ –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 3-5 –º–∏–Ω—É—Ç, –Ω–æ –∏–Ω–æ–≥–¥–∞ –¥–æ 20 –º–∏–Ω—É—Ç –ø—Ä–∏ –±–æ–ª—å—à–æ–π –æ—á–µ—Ä–µ–¥–∏")
        executor.submit(generate_and_send_video, user_id)
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

# ‚Äî‚Äî‚Äî –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ‚Äî‚Äî‚Äî
dp.add_handler(CommandHandler("start", start))
dp.add_handler(MessageHandler(Filters.photo | (Filters.document & Filters.document.mime_type("image/")), image_upload_handler))
dp.add_handler(MessageHandler(Filters.text & ~Filters.command, text_handler))

# ‚Äî‚Äî‚Äî Webhook endpoint ‚Äî‚Äî‚Äî
@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
    except Exception:
        raise HTTPException(status_code=400, detail="Invalid JSON")
    update = Update.de_json(data, bot)
    dp.process_update(update)
    return {"ok": True}

@app.get("/")
def root():
    return {"status": "Bot is running"}
