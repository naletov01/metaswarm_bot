# main.py

import os
import logging
import time
from concurrent.futures import ThreadPoolExecutor

from fastapi import FastAPI, Request, HTTPException
from telegram import Bot, Update, ReplyKeyboardMarkup
from telegram.ext import (
    Dispatcher,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackContext,
)
import replicate
import tempfile
import requests
import httpx
import subprocess
from PIL import Image

# ‚Äî‚Äî‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî‚Äî‚Äî
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ‚Äî‚Äî‚Äî –ö–æ–Ω—Ñ–∏–≥ ‚Äî‚Äî‚Äî
BOT_TOKEN           = os.getenv("BOT_TOKEN")
WEBHOOK_SECRET      = os.getenv("WEBHOOK_SECRET")
WEBHOOK_PATH        = f"/webhook/{WEBHOOK_SECRET}"
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")

if not all([BOT_TOKEN, WEBHOOK_SECRET, REPLICATE_API_TOKEN]):
    logger.error("Missing required environment variables")
    raise RuntimeError("Missing API keys or webhook secret")

bot = Bot(token=BOT_TOKEN)
app = FastAPI()
dp = Dispatcher(bot=bot, update_queue=None, use_context=True)
replicate_client = replicate.Client(token=REPLICATE_API_TOKEN)
executor = ThreadPoolExecutor(max_workers=2)

# ‚Äî‚Äî‚Äî In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ ‚Äî‚Äî‚Äî
user_data = {}  # user_id ‚Üí {"last_image": ..., "last_action": ..., "prompt": ..., "model": ...}
user_limits = {}  # user_id ‚Üí {"videos": int}

MIN_INTERVAL = 5  # —Å–µ–∫ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

# ‚Äî‚Äî‚Äî –§–æ–Ω–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ ‚Äî‚Äî‚Äî
def generate_and_send_video(user_id):
    data = user_data.get(user_id, {})
    image_url = data.get("last_image")
    prompt    = data.get("prompt")
    model     = data.get("model", "kling-pro")

    try:
        logger.info(f"Start video generation: model={model}, prompt={prompt}")
        logger.info(f"[{user_id}] üåÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω–∞...")

        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Telegram, –µ—Å–ª–∏ –æ–Ω–æ –Ω—É–∂–Ω–æ
        tmp_file = None
        if model in ["kling-standard", "kling-pro", "kling-master"]:
            if not image_url:
                bot.send_message(chat_id=user_id, text="–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                return
            response = requests.get(image_url)
            response.raise_for_status()
            with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tmp_file:
                tmp_file.write(response.content)
                tmp_file.flush()

            img = Image.open(tmp_file.name)
            width, height = img.size
            img.close()
            
            image_input = open(tmp_file.name, "rb")

        # –í—ã–∑–æ–≤ –Ω—É–∂–Ω–æ–π –º–æ–¥–µ–ª–∏
        if model == "kling-standard":
            logger.info(f"[{user_id}] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: –º–æ–¥–µ–ª—å={model}, prompt={prompt}, —Ñ–∞–π–ª={image_url}")
            output = replicate.run(
                "kwaivgi/kling-v2.1",
                input={
                    "mode": "standard",
                    "prompt": prompt,
                    "duration": 5,
                    "start_image": image_input,
                    "negative_prompt": ""
                }
            )
        elif model == "kling-pro":
            logger.info(f"[{user_id}] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: –º–æ–¥–µ–ª—å={model}, prompt={prompt}, —Ñ–∞–π–ª={image_url}")
            output = replicate.run(
                "kwaivgi/kling-v2.1",
                input={
                    "mode": "pro",
                    "prompt": prompt,
                    "duration": 5,
                    "start_image": image_input,
                    "negative_prompt": ""
                }
            )
        elif model == "kling-master":
            logger.info(f"[{user_id}] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: –º–æ–¥–µ–ª—å={model}, prompt={prompt}, —Ñ–∞–π–ª={image_url}")
            output = replicate.run(
                "kwaivgi/kling-v2.1-master",
                input={
                    "prompt": prompt,
                    "duration": 5,
                    "aspect_ratio": "16:9",
                    "start_image": image_input,
                    "negative_prompt": ""
                }
            )
        elif model == "veo":
            logger.info(f"[{user_id}] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: –º–æ–¥–µ–ª—å={model}, prompt={prompt}, —Ñ–∞–π–ª={image_url}")
            output = replicate.run(
                "google/veo-3-fast",
                input={"prompt": prompt}
            )
        else:
            raise ValueError("Unknown model selected")

        video_url = output.url
        logger.info(f"[{user_id}] ‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ: {video_url}")
        
        # üîç HEAD-–∑–∞–ø—Ä–æ—Å –∫ —Ñ–∞–π–ª—É (–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏)
        try:
            check = httpx.head(video_url, timeout=10)
            logger.info(f"[{user_id}] HEAD status: {check.status_code}")
            if check.status_code != 200:
                bot.send_message(chat_id=user_id, text="‚ö†Ô∏è –í–∏–¥–µ–æ –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n" + video_url)
                return
        except Exception as e:
            logger.warning(f"[{user_id}] HEAD-–∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è: {e}")
            bot.send_message(chat_id=user_id, text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∏–¥–µ–æ. –í–æ—Ç —Å—Å—ã–ª–∫–∞:\n" + video_url)
            return
        
        # ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        try:
            # 1. –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –≤ tmp_path
            with requests.get(video_url, stream=True) as r:
                r.raise_for_status()
                with tempfile.NamedTemporaryFile(delete=False, suffix=".mp4") as tmp_vid:
                    for chunk in r.iter_content(chunk_size=8192):
                        tmp_vid.write(chunk)
                    tmp_path = tmp_vid.name

            # 2. –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ ffmpeg –ø–æ–¥ –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            fixed_path = tmp_path.replace(".mp4", "_fixed.mp4")
            subprocess.run([
                "ffmpeg", "-i", tmp_path,
                "-vf", f"scale={width}:{height}",
                fixed_path
            ], check=True)

            # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–∂–µ –æ—Ç–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(fixed_path, "rb") as vf:
                bot.send_video(chat_id=user_id, video=vf)

        except Exception as e:
            logger.error(f"[{user_id}] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")
            bot.send_message(
                chat_id=user_id,
                text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –Ω–∞–ø—Ä—è–º—É—é. –í–æ—Ç —Å—Å—ã–ª–∫–∞:\n" + video_url
            )
        finally:
            # 4. –ß–∏—Å—Ç–∏–º –æ–±–∞ —Ñ–∞–π–ª–∞
            if os.path.exists(tmp_path):
                os.remove(tmp_path)
            if os.path.exists(fixed_path):
                os.remove(fixed_path)

        
        # ‚è± –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã
        user_limits.setdefault(user_id, {})["videos"] = user_limits[user_id].get("videos", 0) + 1

    except Exception as e:
        logger.error(f"Video generation error: {e}")
        bot.send_message(chat_id=user_id, text="‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        if tmp_file:
            try:
                os.remove(tmp_file.name)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
        if tmp_file:
            os.remove(tmp_file.name)


# ‚Äî‚Äî‚Äî –•–µ–Ω–¥–ª–µ—Ä—ã ‚Äî‚Äî‚Äî
def start(update: Update, context: CallbackContext):
    keyboard = [["üéû –í–∏–¥–µ–æ (Kling Standard)", "üéû –í–∏–¥–µ–æ (Kling Pro)"], ["üéû –í–∏–¥–µ–æ (Kling Master)", "üéû –í–∏–¥–µ–æ (Veo)"]]
    markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:", reply_markup=markup)

def image_upload_handler(update: Update, context: CallbackContext):
    user_id = update.effective_user.id

    if update.message.photo:
        file_id = update.message.photo[-1].file_id
    elif update.message.document and update.message.document.mime_type.startswith("image/"):
        file_id = update.message.document.file_id
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    try:
        file = context.bot.get_file(file_id)
        file_url = file.file_path

        data = user_data.setdefault(user_id, {})
        data["last_image"] = file_url
        data["last_image_id"] = file_id
        data["mode"] = "video"  # –ø–æ—Å–∫–æ–ª—å–∫—É –≤ –Ω–æ–≤–æ–º —Ñ–ª–æ—É —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ

        # üìå –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ä–∞–∑—É —É–∫–∞–∑–∞–ª –ø–æ–¥–ø–∏—Å—å
        if update.message.caption:
            prompt = update.message.caption.strip()
            data["prompt"] = prompt
            update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏ –ø—Ä–æ–º–ø—Ç—É‚Ä¶")
            executor.submit(generate_and_send_video, user_id)
        else:
            update.message.reply_text("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.")
    except Exception as e:
        logger.error(f"Error saving uploaded image: {e}")
        update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        

def text_handler(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    now = time.time()
    data = user_data.setdefault(user_id, {})
    limits = user_limits.setdefault(user_id, {"videos": 0})

    # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
    last = data.get("last_action", 0)
    if now - last < MIN_INTERVAL:
        wait = int(MIN_INTERVAL - (now - last))
        update.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {wait} —Å–µ–∫.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    model_map = {
        "üéû –í–∏–¥–µ–æ (Kling Standard)": "kling-standard",
        "üéû –í–∏–¥–µ–æ (Kling Pro)": "kling-pro",
        "üéû –í–∏–¥–µ–æ (Kling Master)": "kling-master",
        "üéû –í–∏–¥–µ–æ (Veo)": "veo",
    }
    if text in model_map:
        data["model"] = model_map[text]
        update.message.reply_text("–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º. –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏/–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞
    if data.get("last_image") and data.get("model"):
        data["prompt"] = text
        data["last_action"] = now
        update.message.reply_text("‚è≥ –í–∏–¥–µ–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è‚Ä¶")
        executor.submit(generate_and_send_video, user_id)
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

# ‚Äî‚Äî‚Äî –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ‚Äî‚Äî‚Äî
dp.add_handler(CommandHandler("start", start))
dp.add_handler(MessageHandler(Filters.photo | (Filters.document & Filters.document.mime_type("image/")), image_upload_handler))
dp.add_handler(MessageHandler(Filters.text & ~Filters.command, text_handler))

# ‚Äî‚Äî‚Äî Webhook endpoint ‚Äî‚Äî‚Äî
@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
    except Exception:
        raise HTTPException(status_code=400, detail="Invalid JSON")
    update = Update.de_json(data, bot)
    dp.process_update(update)
    return {"ok": True}

@app.get("/")
def root():
    return {"status": "Bot is running"}
